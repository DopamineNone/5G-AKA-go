// Code generated by Kitex v0.8.0. DO NOT EDIT.

package protocolservice

import (
	seaf "_5gAKA_go/kitex_gen/_5gAKA_go/SEAF"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return protocolServiceServiceInfo
}

var protocolServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProtocolService"
	handlerType := (*seaf.ProtocolService)(nil)
	methods := map[string]kitex.MethodInfo{
		"HandleConnection": kitex.NewMethodInfo(handleConnectionHandler, newProtocolServiceHandleConnectionArgs, newProtocolServiceHandleConnectionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "seaf",
		"ServiceFilePath": `idl\SEAF.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func handleConnectionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*seaf.ProtocolServiceHandleConnectionArgs)

	err := handler.(seaf.ProtocolService).HandleConnection(ctx, realArg.Data)
	if err != nil {
		return err
	}

	return nil
}
func newProtocolServiceHandleConnectionArgs() interface{} {
	return seaf.NewProtocolServiceHandleConnectionArgs()
}

func newProtocolServiceHandleConnectionResult() interface{} {
	return seaf.NewProtocolServiceHandleConnectionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) HandleConnection(ctx context.Context, data string) (err error) {
	var _args seaf.ProtocolServiceHandleConnectionArgs
	_args.Data = data
	var _result seaf.ProtocolServiceHandleConnectionResult
	if err = p.c.Call(ctx, "HandleConnection", &_args, &_result); err != nil {
		return
	}
	return nil
}
